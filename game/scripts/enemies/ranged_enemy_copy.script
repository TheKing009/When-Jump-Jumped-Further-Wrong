local weapons = require "game.modules.weapons"
local enemies = require "game.modules.enemies"
local constants = require "game.modules.constants"
local gamestate = require "game.modules.gamestate"
local player_data = require "game.modules.player_data"

go.property("index", 1)
go.property("max_health", 5)
go.property("bullets_per_second", 0.25);
go.property("bullet_speed", 200)
go.property("bullet_per_shot", 1)
go.property("laser_sight", true)

local function fire(angle, properties, bullet_per_shot)
	local offset = vmath.rotate(angle, vmath.vector3(0, 15, 0))
	if not bullet_per_shot then
		factory.create("/game#bullet_factory", go.get_world_position() + vmath.vector3(0, 4, -0.1), angle, properties);
	else
		local remainder = bullet_per_shot % 2
		local range = math.floor(bullet_per_shot / 2)
		if remainder == 1 then
			for i = -range, range do
				factory.create("/game#bullet_factory", go.get_world_position() + vmath.vector3(0, 4, -0.1), angle, properties);
			end
		else
			range = bullet_per_shot - 1
			for i = -range, range, -1 do
				factory.create("/game#bullet_factory", go.get_world_position() + vmath.vector3(0, 4, -0.1), angle, properties);
			end
		end
	end
end

local function init_enemy(self)
	pprint(self.index)
	self.name = enemies[self.index].name;
	self.max_health = enemies[self.index].max_health;
	self.health = enemies[self.index].max_health;
	self.type = enemies[self.index].type;
	self.speed = enemies[self.index].speed;

	local weapon_index = enemies[self.index].weapon;
	self.weapon = weapons[weapon_index];
	self.fire_rate = 10--1/(self.weapon.bullets_per_second/10);
	self.time_till_next_bullet = math.random(1, self.fire_rate * 100)/100;
end

local function change_state(self, next_state, complete_function)
	if self.state ~= next_state then
		self.state = next_state;
		sprite.play_flipbook("#sprite", self.name.."_"..next_state, complete_function);
	end
end

local function die(self)
	if self.dead then
		return
	end
	self.dead = true;
	change_state(self, constants.DIE);
	sprite.set_hflip("#sprite", false);
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 90, go.EASING_LINEAR, 0.5, 0, function()
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, function()
			go.delete();
			msg.post("/game#game", "enemy_death")
			msg.post(".", "enemy_death")
		end)
	end)
end

local function set_movement_direction(self)
	local angle = math.random(0, 360);
	local quat = vmath.quat_rotation_z(angle)
	self.velocity = vmath.rotate(quat, constants.NORTH) * self.speed;
	self.distance = 0
end

local function take_damage(self, damage)
	if self.state == constants.HIT then
		return;
	end
	
	self.health = self.health - damage;
	self.health = math.max(self.health, 0);
	if self.health == 0 and not self.dead then
		die(self)
	else
		change_state(self, constants.HIT, function()
			set_movement_direction(self)
			change_state(self, constants.IDLE)
		end)
	end
end

function init(self)
	self.index = 1
	init_enemy(self)
	change_state(self, constants.IDLE)
	set_movement_direction(self)
	self.distance = 0

	self.correction = vmath.vector3()
	msg.post("/game#game", "register_enemy")
end

function update(self, dt)
	if self.dead then return end
	if gamestate.get() ~= "PLAY" then
		return	
	end

	if self.state ~= constants.HIT then
		if vmath.length_sqr(self.velocity) > 1 then
			change_state(self, constants.RUN)
		else
			change_state(self, constants.IDLE)
		end
	else
		self.velocity = vmath.vector3()
	end
	
	local position = go.get_position()
	position = position + self.velocity * dt;
	go.set_position(position)

	if self.distance > 120 and self.state ~= constants.IDLE then
		change_state(self, constants.IDLE);
		self.velocity = vmath.vector3()
		local time = math.random(1, 3)
		timer.delay(time, false, function()
			set_movement_direction(self)
		end)
	elseif self.state ~= IDLE then
		self.distance = self.distance + self.speed * dt
	end
	
	local distance = self.weapon.distance or 500;
	local player_position = go.get_position("/player/player")
	local diff = player_position - position;
	local angle = -math.atan2(diff.x, diff.y);
	local quat = vmath.quat_rotation_z(angle)

	if vmath.length_sqr(diff) < (distance ^ 2) then
		if self.time_till_next_bullet <= 0 then
			local properties = {}
			properties.speed = self.weapon.speed / 4;
			properties.enemy_bullet = true;
			properties.type = hash("bullet-5")
			fire(quat, properties, self.weapon.bullet_per_shot);
			self.time_till_next_bullet = self.fire_rate;
		end
	end

	self.time_till_next_bullet = self.time_till_next_bullet - dt;
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if self.dead then return end

	if message_id == constants.COLLISION_RESPONSE then
		if message.group == constants.BULLET then
			local damage = go.get(msg.url(nil, message.other_id, "bullet"), "damage");
			take_damage(self, damage)
			go.delete(message.other_id)
		end
	elseif message_id == constants.CONTACT_POINT_RESPONSE then
		if message.group == constants.WALL then
			if message.distance > 0 then
				set_movement_direction(self)
				local proj = vmath.project(self.correction, message.normal * message.distance)
				--if proj < 1 then
					local comp = (message.distance - message.distance * proj) * message.normal
					go.set_position(go.get_position() + comp)
					self.correction = self.correction + comp
				--end
			end
		end
	end
end