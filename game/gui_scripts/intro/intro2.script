local camera = require "orthographic.camera"
local input = require "game.modules.input"
local constants = require "game.modules.constants"

local CAMERAID = hash("/scene2_camera")

go.property("label", msg.url())
go.property("label_go", msg.url())

local TEXTS = {
	"The name's Jump",
}

local JUMP = hash("/jump")

local function print_text(self, text, shake, on_complete)
	if (not self.completed) or (self.text == text) then
		return
	end
	self.text = text
	self.completed = false
	
	go.animate(self.label_go, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 200, 0), go.EASING_INBACK, 0.75, 0, function()
		label.set_text(self.label, text)
		camera.shake(CAMERAID, shake and 0.005 or 0, 2)
		go.animate(self.label_go, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 85, 0), go.EASING_OUTBACK, 0.75, 0, function()
			print("vnjkfdvj")
			self.completed = true
			camera.stop_shaking(CAMERAID)

			if on_complete then
				on_complete()
			end
		end)
	end)
end




local function midway(self)
	print_text(self, " ")

	go.set_rotation(vmath.quat_rotation_y(math.rad(180)), JUMP) 
	timer.delay(2, false, function()
		go.set_rotation(vmath.quat_rotation_y(math.rad(0)), JUMP)
		go.animate(JUMP, "position.x", go.PLAYBACK_ONCE_FORWARD, -85, go.EASING_LINEAR, 1, 0)
		go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_FORWARD, -50, go.EASING_LINEAR, 0.5, 0, function()
			print_text(self, "I jumped on")
			go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0, function()
				go.set_rotation(vmath.quat_rotation_y(math.pi), "/king")
				sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "king_run")
				msg.post(msg.url(nil, "/king", "dialogue"), "disable")
				go.animate("/king", "position.x", go.PLAYBACK_ONCE_FORWARD, -40, go.EASING_LINEAR, 5, 0, function()
					sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "king_idle")
					print_text(self, "King LiveHard son of DieHard")
					go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_PINGPONG, -50, go.EASING_LINEAR, 1, 1.5, function()
						msg.post(msg.url(nil, "/king", "dialogue"), "enable")
						print_text(self, "And we won the battle of Hardaloo")
						timer.delay(1.5, false, function()
							msg.post(msg.url(nil, "/king", "dialogue"), "disable")
							go.set_rotation(vmath.quat_rotation_y(0), "/king")
							sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "king_run")
							go.animate("/king", "position.x", go.PLAYBACK_ONCE_FORWARD, 304, go.EASING_LINEAR, 2, 0, function()
								msg.post("controller:/controller#controller", "load_scene", {scene = "intro3"})
							end)
						end)
					end)
				end)
			end)
		end)
	end)
end

local function like_to_jump(self)
	print_text(self, "AND, I just like to jump", true)
	
	go.animate(JUMP, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-112, -50, 0), go.EASING_INCUBIC, 0.5, 0, function()
		go.animate(JUMP, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-112, -73, 0), go.EASING_OUTCUBIC, 0.5, 0, function()
			midway(self)
		end)
	end)
end

local function name(self)
	print_text(self, "The name's Jump")
	timer.delay(2, false, function()
		like_to_jump(self)
	end)
end

local function start(self)
	timer.delay(2, false, function()
		go.set_rotation(vmath.quat_rotation_y(math.rad(180)), JUMP)
		timer.delay(2, false, function()
			go.set_rotation(vmath.quat_rotation_y(math.rad(0)), JUMP)
			go.animate(JUMP, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-112, -50, 0), go.EASING_INCUBIC, 0.5, 0, function()
				go.animate(JUMP, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-112, -73, 0), go.EASING_OUTCUBIC, 0.5, 0, function()
					name(self)
				end)
			end)
		end)
	end)
end

function init(self)
	self.completed = true
	self.text = ""
	self.index = 1
	print_text(self, " ")
	
	start(self)
	
	local position = vmath.vector3(0, 198, 0)
	go.set_position(position, self.label_go)
	
	msg.post(msg.url(nil, JUMP, "dialogue"), "disable")
	input.acquire()
end

function final(self)
	input.release()
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
