local input = require "game.modules.input"
local constants = require "game.modules.constants"

local CAMERAID = hash("/scene3_camera")

go.property("label", msg.url())
go.property("label_go", msg.url())

local JUMP = hash("/jump")

local function print_text(self, text, shake, on_complete)
	if (not self.completed) or (self.text == text) then
		return
	end
	self.text = text
	self.completed = false

	go.animate(self.label_go, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 200, 0), go.EASING_INBACK, 0.75, 0, function()
		label.set_text(self.label, text)
		--camera.shake(CAMERAID, shake and 0.005 or 0, 2)
		go.animate(self.label_go, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 85, 0), go.EASING_OUTBACK, 0.75, 0, function()
			print("vnjkfdvj")
			self.completed = true
			--camera.stop_shaking(CAMERAID)

			if on_complete then
				on_complete()
			end
		end)
	end)
end

function animate(self)
	go.set_rotation(vmath.quat_rotation_y(math.rad(180)), JUMP) 
	timer.delay(2, false, function()
		print_text(self, "I jumped on ")
		go.set_rotation(vmath.quat_rotation_y(math.rad(0)), JUMP)
		go.animate(JUMP, "position.x", go.PLAYBACK_ONCE_FORWARD, -85, go.EASING_LINEAR, 1, 0)
		go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_FORWARD, -50, go.EASING_LINEAR, 0.5, 0, function()
			--print_text(self, " ")
			go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0, function()
				sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "kp_run")
				msg.post(msg.url(nil, "/king", "dialogue"), "disable")
				msg.post("/heart", "disable")
				msg.post("/heart1", "disable")
				go.animate("/king", "position.x", go.PLAYBACK_ONCE_FORWARD, -40, go.EASING_LINEAR, 5, 0, function()
					sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "kp_idle")
					print_text(self, "Single King King Pig")
					go.animate(JUMP, "position.y", go.PLAYBACK_ONCE_PINGPONG, -50, go.EASING_LINEAR, 1, 1.5, function()
						msg.post(msg.url(nil, "/king", "dialogue"), "enable")
						print_text(self, " ")
						timer.delay(1.5, false, function()
							msg.post(msg.url(nil, "/king", "dialogue"), "disable")
							msg.post(msg.url(nil, "/queen", "dialogue"), "disable")
							go.set_rotation(vmath.quat_rotation_y(math.pi), "/king")
							sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "kp_run")
							go.animate("/king", "position.x", go.PLAYBACK_ONCE_FORWARD, 304, go.EASING_LINEAR, 2, 0, function()
								msg.post(JUMP, "disable")
								go.set_position(vmath.vector3(-266, -67, 0), "/king")
								sprite.play_flipbook(msg.url(nil, "/queen", "sprite"), "lp_run")
								
								go.animate("/queen", "position.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, 5)
								go.animate("/king", "position.x", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, 5, 0, function()
									sprite.play_flipbook(msg.url(nil, "/queen", "sprite"), "lp_idle")
									sprite.play_flipbook(msg.url(nil, "/king", "sprite"), "kp_idle")

									msg.post(msg.url(nil, "/king", "dialogue"), "enable")
									msg.post(msg.url(nil, "/queen", "dialogue"), "enable")

									print_text(self, "And the King found the Queen")
									timer.delay(2.5, false, function()
										msg.post("/heart", "enable")
										msg.post("/heart1", "enable")
										timer.delay(2, false, function()
											print_text(self, "Let's leave them alone")
											sprite.play_flipbook(msg.url(nil, JUMP, "sprite"), "frog_run")
											go.set_position(vmath.vector3(-266, -73, -0.1), JUMP)
											msg.post(JUMP, "enable")
											go.animate(JUMP, "position.x", go.PLAYBACK_ONCE_FORWARD, 304, go.EASING_LINEAR, 5, 0, function()
												msg.post("controller:/controller#controller", "load_scene", {scene = "intro4"})
											end)	
										end)
									end)		
									
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end)
end

function init(self)
	self.completed = true
	self.text = ""
	self.index = 1
	print_text(self, " ")

	animate(self)

	local position = vmath.vector3(0, 198, 0)
	go.set_position(position, self.label_go)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove S
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
